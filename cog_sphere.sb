{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "1.14",
                    "name": "r",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('-r++qXqYqZf1.14',float('-1.140000'),float('-1.140000'),float('-1.140000'),float('1.140000'),float('1.140000'),float('1.140000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                392.46956806384048,
                859.90065612229796
            ],
            "name": "s0",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Sphere (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.sphere(x, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z-r), (x,y,z+r)])",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y, z + r, drag=(None, None, r))",
                "sb.ui.point(x, y, z - r, drag=(None, None, r))",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "-0.15",
                    "name": "z",
                    "type": "float",
                    "uid": 9
                },
                {
                    "expr": "1.44",
                    "name": "z0",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "3.6",
                    "name": "z1",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "0.32",
                    "name": "r",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "1.28",
                    "name": "width",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "3.76",
                    "name": "height",
                    "type": "float",
                    "uid": 7
                },
                {
                    "expr": "90",
                    "name": "a",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aam+f0/*-Xf0f3.76+*f0-Zf-0.15*f1-f3.61Z+f0/*-Yf0f3.76+*f0-Zf-0.15*f1-f3.61Z_am__f1aa-f-0.64X-Xf0.64a-f-0.64Y-Yf0.64a-f-0.15Z-Zf3.61nm+f0/*-Xf0f3.76+*f0-Zf-0.15*f1-f3.61Z+f0/*-Yf0f3.76+*f0-Zf-0.15*f1-f3.61Z_am__f1aa-f-0.32X-Xf0.32a-f-0.32Y-Yf0.32a-f-0.15Z-Zf3.61niiim-Xf0-Yf0-Zf0m+*f1X*f0Y+*f-0X*f1Y_m-Xf-0-Yf-0-Zf0m-Xf0-Yf0-Zf1.44m_+*f6.12323e-17Y*f1Z+*f-1Y*f6.12323e-17Zm-Xf0-Yf-0-Zf-1.44m+f0/*-Xf0f2.16+*f0-Zf1.44*f1-f3.6Z+f0/*-Yf0f2.16+*f0-Zf1.44*f1-f3.6Z_am__f1-r+qXqYf0.32a-f1.44Z-Zf3.6m-Xf0-Yf0-Zf0m+*f6.12323e-17X*f1Y+*f-1X*f6.12323e-17Y_m-Xf-0-Yf-0-Zf0m-Xf0-Yf0-Zf1.44m_+*f6.12323e-17Y*f1Z+*f-1Y*f6.12323e-17Zm-Xf0-Yf-0-Zf-1.44m+f0/*-Xf0f2.16+*f0-Zf1.44*f1-f3.6Z+f0/*-Yf0f2.16+*f0-Zf1.44*f1-f3.6Z_am__f1-r+qXqYf0.32a-f1.44Z-Zf3.6m-Xf0-Yf0-Zf0m+*f-1X*f1.22465e-16Y+*f-1.22465e-16X*f-1Y_m-Xf-0-Yf-0-Zf0m-Xf0-Yf0-Zf1.44m_+*f6.12323e-17Y*f1Z+*f-1Y*f6.12323e-17Zm-Xf0-Yf-0-Zf-1.44m+f0/*-Xf0f2.16+*f0-Zf1.44*f1-f3.6Z+f0/*-Yf0f2.16+*f0-Zf1.44*f1-f3.6Z_am__f1-r+qXqYf0.32a-f1.44Z-Zf3.6m-Xf0-Yf0-Zf0m+*f-1.83697e-16X*f-1Y+*f1X*f-1.83697e-16Y_m-Xf-0-Yf-0-Zf0m-Xf0-Yf0-Zf1.44m_+*f6.12323e-17Y*f1Z+*f-1Y*f6.12323e-17Zm-Xf0-Yf-0-Zf-1.44m+f0/*-Xf0f2.16+*f0-Zf1.44*f1-f3.6Z+f0/*-Yf0f2.16+*f0-Zf1.44*f1-f3.6Z_am__f1-r+qXqYf0.32a-f1.44Z-Zf3.6',float('-0.640000'),float('-0.640000'),float('-0.150000'),float('0.640000'),float('0.640000'),float('3.610000'))",
                    "name": "s",
                    "type": "_fabtypes.Shape",
                    "uid": 8
                }
            ],
            "inspector": [
                394.80298112273817,
                1063.3442843943606
            ],
            "name": "s1",
            "script": [
                "import fab",
                "",
                "title('problyramid')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('z0', float)",
                "input('z1', float)",
                "input('r', float)",
                "input('width', float)",
                "input('height', float)",
                "input('a', float)",
                "",
                "# pyramid",
                "p1 = fab.shapes.pyramid(x - width/2, x + width/2,",
                "                        y - width/2, y + width/2,",
                "                        z, z + height)",
                "",
                "# cone",
                "c1 = fab.shapes.cone(x, y, z0, z1, r)",
                "",
                "# rotate X",
                "c2 = fab.shapes.rotate_x(c1, a, y, z0)",
                "",
                "# polar",
                "c3 = fab.shapes.iterate_polar(c2, x, y, 4)",
                "",
                "# inner pyramid",
                "p2 = fab.shapes.pyramid(x - width/4, x + width/4,",
                "                        y - width/4, y + width/4,",
                "                        z, z + height)",
                "",
                "# shell pyramid",
                "p3 = p1 & ~p2",
                "",
                "# difference",
                "s1 = p3 & ~c3",
                "",
                "output('s', s1)"
            ],
            "uid": 7
        }
    ],
    "protocol": 6,
    "type": "sb"
}
